
Domain:
D(studentIdnr, studentName, login, branchName, programName, programAbbreviation, 
 courseCode, courseName, credits, departmentName, departmentAbbreviation, capacity, 
 classification, grade, position)

***************************************************************************************
1. studentIdnr → studentName, login, programName
2. login → studentIdnr
3. programName → programAbbreviation, departmentName, departmentAbbreviation
4. courseCode → courseName, credits, departmentName, capacity
5. programName → departmentName
6. departmentNAme → departmentAbbreviation
7. (studentIdnr, courseCode) → grade
8. (studentIdnr, courseCode) → position
9. (courseCode, position) → studentIdnr
10. studentIdnr → branchName???
11. (studentIdnr, courseCode) → grade, position
12. courseCode → classification

***************************************************************************************
-- a) Functional dependencies --

1.studentIdnr → studentName, login
2.login → studentIdnr, studentName
3.programName → programAbbreviation
4.departmentAbbreviation → departmentName
5.courseCode → courseName, credits, departmentName
6.courseCode, classification → {} 
7.studentIdnr, courseCode → grade
8.courseCode, position → studentIdnr (in waiting list)
9.studentIdnr, branchName → programName
10.programName, branchName → {}
12.courseCode → capacity (for limited courses)
13.departmentName → departmentAbbreviation
14.studentIdnr, courseCode → position (in waiting list)
15.courseCode, studentIdnr → grade(in taken courses)

-- b) BCNF schema --
***************************************************************************************
Schema of the FDs above using BCNF normalization by hand:

R(studentIdnr, studentName, login, branchName, programName, programAbbreviation, 
 courseCode, courseName, credits, departmentName, departmentAbbreviation, capacity, 
 classification, grade, position)

Decompose R using studentIdnr → studentName, login, programName
X = {studentIdnr}, X+ = {studentIdnr}+ = {studentIdnr, studentName, login, programName} 
R1(X+)=			R1(studentIdnr, studentName, login, programName) 
R2(X∪(S−X+))= 		R2(studentIdnr, branchName, programAbbreviation, courseCode, courseName, credits, 
		   departmentName, departmentAbbreviation, capacity, 
 	           classification, grade, position )

Decompose R2 using courseCode → courseName, credits, departmentName, capacity
X = {courseCode}, X+ = {courseCode}+ = {courseCode, courseName, credits, departmentName, capacity}
R3(X+)=			R3(courseCode, courseName, credits, departmentName, capacity)
R4(X∪(S−X+))=		R4(studentIdnr, branchName, programAbbreviation, courseCode, 
			    departmentAbbreviation,classification, grade, position)

Decompose R4 using programName → programAbbreviation, departmentName, departmentAbbreviation
X = {programName}, X+ = {programName}+ = {programName, programAbbreviation, departmentName}
R5(X+)=			R5(programName, programAbbreviation, departmentName)
R6(X∪(S−X+))=		R6(studentIdnr, branchName, programName, courseCode,classification, 
			     grade, position)

Decompose R6 using (studentIdnr, courseCode) → grade
X = {(studentIdnr, courseCode)}, X+ = {(studentIdnr, courseCode)}+ = {studentIdnr, courseCode, grade}
R7(X+)=			R7(studentIdnr, courseCode, grade)
R8(X∪(S−X+))=		R8(studentIdnr, programName, branchName, courseCode,classification, position)

Decompose R8 using (studentIdnr, courseCode) → position
R9(X+)=			R9(studentIdnr, courseCode, position)
R10(X∪(S−X+))=		R10(studentIdnr, programName, branchName, courseCode,classification)

further normalized using 4NF normalization
MVD: courseCode → classification
X = {courseCode}, X+ = {courseCode}+ = {courseCode, classification}
R11(X+)= 		R11(courseCode, classification) 

Final Result:
R0(studentIdnr, studentName, login, programName)
R1(courseCode, courseName, credits, departmentName, capacity)
R2(programName, programAbbreviation, departmentName)
R3(studentIdnr, courseCode, grade)
R4(studentIdnr, courseCode, position)
R5(courseCode, classification)

R0(studentIdnr, studentName, login, programName)
R1(courseCode, courseName, credits, departmentName, capacity)
R2(programName, programAbbreviation)
R3(departmentName, departmentAbbreviation)
R4(studentIdnr, courseCode, grade)
R5(studentIdnr, courseCode, position)
R6(courseCode, classification)



***************************************************************************************


BasicStudentInfo(_studentIdnr_, name, login)

StudentPrograms(_studentIdnr_, _programName_)
    studentIdnr → BasicStudentInfo.studentIdnr
    programName → Programs.name

Programs(_name_, abbreviation)

Departments(_name_, abbreviation)

Courses(_code_, name, credits, department)
    department → Departments.name

Classifications(_name_)

CourseClassifications(_course_, _classification_)
    course → Courses.code
    classification → Classifications.name

LimitedCourses(_code_, capacity)
    code → Courses.code

Grades(_studentIdnr_, _courseCode_, grade)
    studentIdnr → BasicStudentInfo.studentIdnr
    courseCode → Courses.code

WaitingList(_courseCode_, _position_, studentIdnr)
    courseCode → LimitedCourses.code
    studentIdnr → BasicStudentInfo.studentIdnr

Branches(_name_, _program_)
    program → Programs.name

StudentBranches(_studentIdnr_, branchName, programName)
    studentIdnr → BasicStudentInfo.studentIdnr
    (branchName, programName) → Branches.(name, program)

    
-- c) 4NF additions --

MVD identified: courseCode ->> classification

# Relations removed:
CourseClassifications(_course_, _classification_)

# Relations added:
Classifications(_name_)
CourseClassification(_courseCode_, _classification_)
    courseCode → Courses.code
    classification → Classifications.name

